/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICertificateCategoryClient {
    get(): Observable<CertificateCategory[]>;
    create(command: CreateCertificateCategoriesCommand): Observable<number>;
    update(certificateCategoryId: number, command: UpdateCertificateCategoriesCommand): Observable<FileResponse>;
    delete(certificateCategoryId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class CertificateCategoryClient implements ICertificateCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<CertificateCategory[]> {
        let url_ = this.baseUrl + "/api/CertificateCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CertificateCategory[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CertificateCategory[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CertificateCategory[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CertificateCategory.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CertificateCategory[]>(<any>null);
    }

    create(command: CreateCertificateCategoriesCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/CertificateCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(certificateCategoryId: number, command: UpdateCertificateCategoriesCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CertificateCategory/{CertificateCategoryId}";
        if (certificateCategoryId === undefined || certificateCategoryId === null)
            throw new Error("The parameter 'certificateCategoryId' must be defined.");
        url_ = url_.replace("{CertificateCategoryId}", encodeURIComponent("" + certificateCategoryId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(certificateCategoryId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CertificateCategory/{CertificateCategoryId}";
        if (certificateCategoryId === undefined || certificateCategoryId === null)
            throw new Error("The parameter 'certificateCategoryId' must be defined.");
        url_ = url_.replace("{CertificateCategoryId}", encodeURIComponent("" + certificateCategoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ICourseCategoryClient {
    get(): Observable<CourseCategory[]>;
    create(command: CreateCourseCategoriesCommand): Observable<number>;
    update(courseCategoryId: number, command: UpdateCourseCategoriesCommand): Observable<FileResponse>;
    delete(courseCategoryId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class CourseCategoryClient implements ICourseCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<CourseCategory[]> {
        let url_ = this.baseUrl + "/api/CourseCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CourseCategory[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CourseCategory[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CourseCategory[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourseCategory.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CourseCategory[]>(<any>null);
    }

    create(command: CreateCourseCategoriesCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/CourseCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(courseCategoryId: number, command: UpdateCourseCategoriesCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CourseCategory/{CourseCategoryId}";
        if (courseCategoryId === undefined || courseCategoryId === null)
            throw new Error("The parameter 'courseCategoryId' must be defined.");
        url_ = url_.replace("{CourseCategoryId}", encodeURIComponent("" + courseCategoryId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(courseCategoryId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CourseCategory/{CourseCategoryId}";
        if (courseCategoryId === undefined || courseCategoryId === null)
            throw new Error("The parameter 'courseCategoryId' must be defined.");
        url_ = url_.replace("{CourseCategoryId}", encodeURIComponent("" + courseCategoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IGroupClient {
    get(): Observable<Group[]>;
    create(command: CreateGroupCommand): Observable<number>;
    update(groupId: number, command: UpdateGroupCommand): Observable<FileResponse>;
    delete(groupId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class GroupClient implements IGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<Group[]> {
        let url_ = this.baseUrl + "/api/Group";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Group[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Group[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Group.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group[]>(<any>null);
    }

    create(command: CreateGroupCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Group";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(groupId: number, command: UpdateGroupCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Group/{GroupId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{GroupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(groupId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Group/{GroupId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{GroupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ILocationClient {
    get(): Observable<Location[]>;
    create(command: CreateLocationCommand): Observable<number>;
    update(locationId: number, command: UpdateLocationCommand): Observable<FileResponse>;
    delete(groupId: number | undefined, locationId: string): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class LocationClient implements ILocationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<Location[]> {
        let url_ = this.baseUrl + "/api/Location";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Location[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Location[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Location[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Location.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Location[]>(<any>null);
    }

    create(command: CreateLocationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Location";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(locationId: number, command: UpdateLocationCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Location/{LocationId}";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{LocationId}", encodeURIComponent("" + locationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(groupId: number | undefined, locationId: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Location/{LocationId}?";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{LocationId}", encodeURIComponent("" + locationId));
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "GroupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IQuestionClient {
    get(): Observable<Questions[]>;
    create(command: CreateQuestionCommand): Observable<number>;
    update(questionsId: number, command: UpdateQuestionCommand): Observable<FileResponse>;
    delete(questionsId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class QuestionClient implements IQuestionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<Questions[]> {
        let url_ = this.baseUrl + "/api/Question";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Questions[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Questions[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Questions[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Questions.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Questions[]>(<any>null);
    }

    create(command: CreateQuestionCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Question";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(questionsId: number, command: UpdateQuestionCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Question/{QuestionsId}";
        if (questionsId === undefined || questionsId === null)
            throw new Error("The parameter 'questionsId' must be defined.");
        url_ = url_.replace("{QuestionsId}", encodeURIComponent("" + questionsId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(questionsId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Question/{QuestionsId}";
        if (questionsId === undefined || questionsId === null)
            throw new Error("The parameter 'questionsId' must be defined.");
        url_ = url_.replace("{QuestionsId}", encodeURIComponent("" + questionsId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ITrainingRoomClient {
    get(): Observable<TrainingRoom[]>;
    create(command: CreateTrainingRoomsCommand): Observable<number>;
    update(roomId: number, command: UpdateTrainingRoomsCommand): Observable<FileResponse>;
    delete(roomId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class TrainingRoomClient implements ITrainingRoomClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<TrainingRoom[]> {
        let url_ = this.baseUrl + "/api/TrainingRoom";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<TrainingRoom[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TrainingRoom[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TrainingRoom[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TrainingRoom.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TrainingRoom[]>(<any>null);
    }

    create(command: CreateTrainingRoomsCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/TrainingRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(roomId: number, command: UpdateTrainingRoomsCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TrainingRoom/{RoomId}";
        if (roomId === undefined || roomId === null)
            throw new Error("The parameter 'roomId' must be defined.");
        url_ = url_.replace("{RoomId}", encodeURIComponent("" + roomId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(roomId: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TrainingRoom/{RoomId}";
        if (roomId === undefined || roomId === null)
            throw new Error("The parameter 'roomId' must be defined.");
        url_ = url_.replace("{RoomId}", encodeURIComponent("" + roomId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export abstract class AuditableEntityWithActiveFlag implements IAuditableEntityWithActiveFlag {
    createdBy?: string | undefined;
    createdOn?: Date | undefined;
    modifiedBy?: string | undefined;
    modifiedOn?: Date | undefined;
    activeFlag?: boolean | undefined;

    constructor(data?: IAuditableEntityWithActiveFlag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedBy = _data["modifiedBy"];
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
            this.activeFlag = _data["activeFlag"];
        }
    }

    static fromJS(data: any): AuditableEntityWithActiveFlag {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableEntityWithActiveFlag' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        data["activeFlag"] = this.activeFlag;
        return data; 
    }
}

export interface IAuditableEntityWithActiveFlag {
    createdBy?: string | undefined;
    createdOn?: Date | undefined;
    modifiedBy?: string | undefined;
    modifiedOn?: Date | undefined;
    activeFlag?: boolean | undefined;
}

export class CertificateCategory extends AuditableEntityWithActiveFlag implements ICertificateCategory {
    certificateCategoryId?: number;
    certificateCategoryName?: string | undefined;

    constructor(data?: ICertificateCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.certificateCategoryId = _data["certificateCategoryId"];
            this.certificateCategoryName = _data["certificateCategoryName"];
        }
    }

    static fromJS(data: any): CertificateCategory {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateCategoryId"] = this.certificateCategoryId;
        data["certificateCategoryName"] = this.certificateCategoryName;
        super.toJSON(data);
        return data; 
    }
}

export interface ICertificateCategory extends IAuditableEntityWithActiveFlag {
    certificateCategoryId?: number;
    certificateCategoryName?: string | undefined;
}

export class CreateCertificateCategoriesCommand implements ICreateCertificateCategoriesCommand {
    certificateCategoryName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateCertificateCategoriesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificateCategoryName = _data["certificateCategoryName"];
            this.activeFlag = _data["activeFlag"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateCertificateCategoriesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCertificateCategoriesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateCategoryName"] = this.certificateCategoryName;
        data["activeFlag"] = this.activeFlag;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateCertificateCategoriesCommand {
    certificateCategoryName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;
}

export class UpdateCertificateCategoriesCommand implements IUpdateCertificateCategoriesCommand {
    certificateCategoryId?: number;
    certificateCategoryName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateCertificateCategoriesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificateCategoryId = _data["certificateCategoryId"];
            this.certificateCategoryName = _data["certificateCategoryName"];
            this.activeFlag = _data["activeFlag"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateCertificateCategoriesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCertificateCategoriesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateCategoryId"] = this.certificateCategoryId;
        data["certificateCategoryName"] = this.certificateCategoryName;
        data["activeFlag"] = this.activeFlag;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateCertificateCategoriesCommand {
    certificateCategoryId?: number;
    certificateCategoryName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;
}

export class CourseCategory extends AuditableEntityWithActiveFlag implements ICourseCategory {
    courseCategoryId?: number | undefined;
    courseCategoryName?: string | undefined;

    constructor(data?: ICourseCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.courseCategoryId = _data["courseCategoryId"];
            this.courseCategoryName = _data["courseCategoryName"];
        }
    }

    static fromJS(data: any): CourseCategory {
        data = typeof data === 'object' ? data : {};
        let result = new CourseCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseCategoryId"] = this.courseCategoryId;
        data["courseCategoryName"] = this.courseCategoryName;
        super.toJSON(data);
        return data; 
    }
}

export interface ICourseCategory extends IAuditableEntityWithActiveFlag {
    courseCategoryId?: number | undefined;
    courseCategoryName?: string | undefined;
}

export class CreateCourseCategoriesCommand implements ICreateCourseCategoriesCommand {
    courseCategoryName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateCourseCategoriesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courseCategoryName = _data["courseCategoryName"];
            this.activeFlag = _data["activeFlag"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateCourseCategoriesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourseCategoriesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseCategoryName"] = this.courseCategoryName;
        data["activeFlag"] = this.activeFlag;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateCourseCategoriesCommand {
    courseCategoryName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;
}

export class UpdateCourseCategoriesCommand implements IUpdateCourseCategoriesCommand {
    courseCategoryId?: number;
    courseCategoryName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateCourseCategoriesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courseCategoryId = _data["courseCategoryId"];
            this.courseCategoryName = _data["courseCategoryName"];
            this.activeFlag = _data["activeFlag"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateCourseCategoriesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourseCategoriesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseCategoryId"] = this.courseCategoryId;
        data["courseCategoryName"] = this.courseCategoryName;
        data["activeFlag"] = this.activeFlag;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateCourseCategoriesCommand {
    courseCategoryId?: number;
    courseCategoryName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;
}

export class Group extends AuditableEntityWithActiveFlag implements IGroup {
    groupId?: number;
    groupName?: string | undefined;

    constructor(data?: IGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupName = _data["groupName"];
        }
    }

    static fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupName"] = this.groupName;
        super.toJSON(data);
        return data; 
    }
}

export interface IGroup extends IAuditableEntityWithActiveFlag {
    groupId?: number;
    groupName?: string | undefined;
}

export class CreateGroupCommand implements ICreateGroupCommand {
    groupName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupName = _data["groupName"];
            this.activeFlag = _data["activeFlag"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupName"] = this.groupName;
        data["activeFlag"] = this.activeFlag;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateGroupCommand {
    groupName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;
}

export class UpdateGroupCommand implements IUpdateGroupCommand {
    groupId?: number;
    groupName?: string | undefined;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.groupName = _data["groupName"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["groupName"] = this.groupName;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateGroupCommand {
    groupId?: number;
    groupName?: string | undefined;
    modifiedBy?: string | undefined;
}

export class Location extends AuditableEntityWithActiveFlag implements ILocation {
    locationId?: number;
    locationName?: string | undefined;

    constructor(data?: ILocation) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.locationId = _data["locationId"];
            this.locationName = _data["locationName"];
        }
    }

    static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        data["locationName"] = this.locationName;
        super.toJSON(data);
        return data; 
    }
}

export interface ILocation extends IAuditableEntityWithActiveFlag {
    locationId?: number;
    locationName?: string | undefined;
}

export class CreateLocationCommand implements ICreateLocationCommand {
    locationName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateLocationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationName = _data["locationName"];
            this.activeFlag = _data["activeFlag"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateLocationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLocationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationName"] = this.locationName;
        data["activeFlag"] = this.activeFlag;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateLocationCommand {
    locationName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;
}

export class UpdateLocationCommand implements IUpdateLocationCommand {
    locationId?: number;
    locationName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateLocationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationId = _data["locationId"];
            this.locationName = _data["locationName"];
            this.activeFlag = _data["activeFlag"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateLocationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLocationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId;
        data["locationName"] = this.locationName;
        data["activeFlag"] = this.activeFlag;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateLocationCommand {
    locationId?: number;
    locationName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;
}

export class Questions extends AuditableEntityWithActiveFlag implements IQuestions {
    questionsId?: number;
    questionsName?: string | undefined;
    feedBackQuestion?: FeedBackQuestion[] | undefined;

    constructor(data?: IQuestions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.questionsId = _data["questionsId"];
            this.questionsName = _data["questionsName"];
            if (Array.isArray(_data["feedBackQuestion"])) {
                this.feedBackQuestion = [] as any;
                for (let item of _data["feedBackQuestion"])
                    this.feedBackQuestion!.push(FeedBackQuestion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Questions {
        data = typeof data === 'object' ? data : {};
        let result = new Questions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionsId"] = this.questionsId;
        data["questionsName"] = this.questionsName;
        if (Array.isArray(this.feedBackQuestion)) {
            data["feedBackQuestion"] = [];
            for (let item of this.feedBackQuestion)
                data["feedBackQuestion"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IQuestions extends IAuditableEntityWithActiveFlag {
    questionsId?: number;
    questionsName?: string | undefined;
    feedBackQuestion?: FeedBackQuestion[] | undefined;
}

export class AuditableEntity implements IAuditableEntity {
    createdBy?: string | undefined;
    createdOn?: Date | undefined;
    modifiedBy?: string | undefined;
    modifiedOn?: Date | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedBy = _data["modifiedBy"];
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        let result = new AuditableEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAuditableEntity {
    createdBy?: string | undefined;
    createdOn?: Date | undefined;
    modifiedBy?: string | undefined;
    modifiedOn?: Date | undefined;
}

export class FeedBackQuestion extends AuditableEntity implements IFeedBackQuestion {
    feedBackQuestionId?: number;
    feedBackId?: number | undefined;
    questionsId?: number | undefined;
    score?: number | undefined;
    questions?: Questions | undefined;

    constructor(data?: IFeedBackQuestion) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.feedBackQuestionId = _data["feedBackQuestionId"];
            this.feedBackId = _data["feedBackId"];
            this.questionsId = _data["questionsId"];
            this.score = _data["score"];
            this.questions = _data["questions"] ? Questions.fromJS(_data["questions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedBackQuestion {
        data = typeof data === 'object' ? data : {};
        let result = new FeedBackQuestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedBackQuestionId"] = this.feedBackQuestionId;
        data["feedBackId"] = this.feedBackId;
        data["questionsId"] = this.questionsId;
        data["score"] = this.score;
        data["questions"] = this.questions ? this.questions.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFeedBackQuestion extends IAuditableEntity {
    feedBackQuestionId?: number;
    feedBackId?: number | undefined;
    questionsId?: number | undefined;
    score?: number | undefined;
    questions?: Questions | undefined;
}

export class CreateQuestionCommand implements ICreateQuestionCommand {
    questionsName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateQuestionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionsName = _data["questionsName"];
            this.activeFlag = _data["activeFlag"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateQuestionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateQuestionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionsName"] = this.questionsName;
        data["activeFlag"] = this.activeFlag;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateQuestionCommand {
    questionsName?: string | undefined;
    activeFlag?: boolean;
    createdBy?: string | undefined;
}

export class UpdateQuestionCommand implements IUpdateQuestionCommand {
    questionsId?: number;
    questionsName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateQuestionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionsId = _data["questionsId"];
            this.questionsName = _data["questionsName"];
            this.activeFlag = _data["activeFlag"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateQuestionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuestionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionsId"] = this.questionsId;
        data["questionsName"] = this.questionsName;
        data["activeFlag"] = this.activeFlag;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateQuestionCommand {
    questionsId?: number;
    questionsName?: string | undefined;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;
}

export class TrainingRoom extends AuditableEntityWithActiveFlag implements ITrainingRoom {
    roomId?: number;
    roomDescription?: string | undefined;
    seatingCapacity?: number | undefined;
    hasProjector?: boolean;

    constructor(data?: ITrainingRoom) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roomId = _data["roomId"];
            this.roomDescription = _data["roomDescription"];
            this.seatingCapacity = _data["seatingCapacity"];
            this.hasProjector = _data["hasProjector"];
        }
    }

    static fromJS(data: any): TrainingRoom {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingRoom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomDescription"] = this.roomDescription;
        data["seatingCapacity"] = this.seatingCapacity;
        data["hasProjector"] = this.hasProjector;
        super.toJSON(data);
        return data; 
    }
}

export interface ITrainingRoom extends IAuditableEntityWithActiveFlag {
    roomId?: number;
    roomDescription?: string | undefined;
    seatingCapacity?: number | undefined;
    hasProjector?: boolean;
}

export class CreateTrainingRoomsCommand implements ICreateTrainingRoomsCommand {
    roomDescription?: string | undefined;
    seatingCapacity?: number;
    activeFlag?: boolean;
    hasProjector?: boolean;
    createdBy?: string | undefined;

    constructor(data?: ICreateTrainingRoomsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomDescription = _data["roomDescription"];
            this.seatingCapacity = _data["seatingCapacity"];
            this.activeFlag = _data["activeFlag"];
            this.hasProjector = _data["hasProjector"];
            this.createdBy = _data["createdBy"];
        }
    }

    static fromJS(data: any): CreateTrainingRoomsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTrainingRoomsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomDescription"] = this.roomDescription;
        data["seatingCapacity"] = this.seatingCapacity;
        data["activeFlag"] = this.activeFlag;
        data["hasProjector"] = this.hasProjector;
        data["createdBy"] = this.createdBy;
        return data; 
    }
}

export interface ICreateTrainingRoomsCommand {
    roomDescription?: string | undefined;
    seatingCapacity?: number;
    activeFlag?: boolean;
    hasProjector?: boolean;
    createdBy?: string | undefined;
}

export class UpdateTrainingRoomsCommand implements IUpdateTrainingRoomsCommand {
    roomId?: number;
    roomDescription?: string | undefined;
    seatingCapacity?: number;
    hasProjector?: boolean;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;

    constructor(data?: IUpdateTrainingRoomsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"];
            this.roomDescription = _data["roomDescription"];
            this.seatingCapacity = _data["seatingCapacity"];
            this.hasProjector = _data["hasProjector"];
            this.activeFlag = _data["activeFlag"];
            this.modifiedBy = _data["modifiedBy"];
        }
    }

    static fromJS(data: any): UpdateTrainingRoomsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTrainingRoomsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomDescription"] = this.roomDescription;
        data["seatingCapacity"] = this.seatingCapacity;
        data["hasProjector"] = this.hasProjector;
        data["activeFlag"] = this.activeFlag;
        data["modifiedBy"] = this.modifiedBy;
        return data; 
    }
}

export interface IUpdateTrainingRoomsCommand {
    roomId?: number;
    roomDescription?: string | undefined;
    seatingCapacity?: number;
    hasProjector?: boolean;
    activeFlag?: boolean;
    modifiedBy?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}